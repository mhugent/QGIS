/***************************************************************************
     testqgsgeometryv2importexport.cpp
     --------------------------------------
    Date                 : 05 Feb 2015
    Copyright            : (C) 2015 by Sandro Mani
    Email                : smani@sourcepole.ch
 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include "qgsapplication.h"
#include "qgsabstractgeometryv2.h"
#include "qgscircularstringv2.h"
#include "qgscompoundcurvev2.h"
#include "qgscurvepolygonv2.h"
#include "qgsgeometrycollectionv2.h"
#include "qgslinestringv2.h"
#include "qgsmulticurvev2.h"
#include "qgsmultilinestringv2.h"
#include "qgsmultipointv2.h"
#include "qgsmultipolygonv2.h"
#include "qgsmultisurfacev2.h"
#include "qgspointv2.h"
#include "qgspolygonv2.h"

#include <QtTest>
#include <QObject>

typedef void compateGeometries_t( const QgsAbstractGeometryV2*, const QgsAbstractGeometryV2* );

void compareQgsPointV2( const QgsAbstractGeometryV2* geom1, const QgsAbstractGeometryV2* geom2 )
{
  Q_ASSERT( dynamic_cast<const QgsPointV2*>( geom1 ) && dynamic_cast<const QgsPointV2*>( geom2 ) );
  const QgsPointV2* p1 = static_cast<const QgsPointV2*>( geom1 );
  const QgsPointV2* p2 = static_cast<const QgsPointV2*>( geom2 );

  QVERIFY( qgsDoubleNear( p1->x(), p2->x() ) );
  QVERIFY( qgsDoubleNear( p1->y(), p2->y() ) );
  QVERIFY( qgsDoubleNear( p1->z(), p2->z() ) );
  QVERIFY( qgsDoubleNear( p1->m(), p2->m() ) );
}

void compareQgsCurveV2( const QgsAbstractGeometryV2* geom1, const QgsAbstractGeometryV2* geom2 )
{
  Q_ASSERT( dynamic_cast<const QgsCurveV2*>( geom1 ) && dynamic_cast<const QgsCurveV2*>( geom2 ) );

  QList<QgsPointV2> points1, points2;
  static_cast<const QgsCurveV2*>( geom1 )->points( points1 );
  static_cast<const QgsCurveV2*>( geom2 )->points( points2 );
  QVERIFY( points1.size() == points2.size() );

  for ( int i = 0, n = points1.size(); i < n; ++i )
  {
    QVERIFY( qgsDoubleNear( points1[i].x(), points2[i].x() ) );
    QVERIFY( qgsDoubleNear( points1[i].y(), points2[i].y() ) );
    QVERIFY( qgsDoubleNear( points1[i].z(), points2[i].z() ) );
    QVERIFY( qgsDoubleNear( points1[i].m(), points2[i].m() ) );
  }
}

void compareQgsCompoundCurveV2( const QgsAbstractGeometryV2* geom1, const QgsAbstractGeometryV2* geom2 )
{
  Q_ASSERT( dynamic_cast<const QgsCompoundCurveV2*>( geom1 ) && dynamic_cast<const QgsCompoundCurveV2*>( geom2 ) );
  const QgsCompoundCurveV2* c1 = static_cast<const QgsCompoundCurveV2*>( geom1 );
  const QgsCompoundCurveV2* c2 = static_cast<const QgsCompoundCurveV2*>( geom2 );

  QVERIFY( c1->nCurves() == c2->nCurves() );

  for ( int i = 0, n = c1->nCurves(); i < n; ++i )
  {
    compareQgsCurveV2( c1->curveAt( i ), c2->curveAt( i ) );
  }
}

void compareQgsCurvePolygonV2( const QgsAbstractGeometryV2* geom1, const QgsAbstractGeometryV2* geom2 )
{
  Q_ASSERT( dynamic_cast<const QgsCurvePolygonV2*>( geom1 ) && dynamic_cast<const QgsCurvePolygonV2*>( geom2 ) );
  const QgsCurvePolygonV2* c1 = static_cast<const QgsCurvePolygonV2*>( geom1 );
  const QgsCurvePolygonV2* c2 = static_cast<const QgsCurvePolygonV2*>( geom2 );

  QVERIFY( bool( c1->exteriorRing() ) == bool( c2->exteriorRing() ) );
  QVERIFY( c1->numInteriorRings() == c2->numInteriorRings() );

  compareQgsCurveV2( c1->exteriorRing(), c2->exteriorRing() );
  for ( int i = 0, n = c1->numInteriorRings(); i < n; ++i )
  {
    compareQgsCurveV2( c1->interiorRing( i ), c2->interiorRing( i ) );
  }
}

template<compateGeometries_t compareChildGeometries>
void compareQgsGeometryCollectionV2( const QgsAbstractGeometryV2* geom1, const QgsAbstractGeometryV2* geom2 )
{
  Q_ASSERT( dynamic_cast<const QgsGeometryCollectionV2*>( geom1 ) && dynamic_cast<const QgsGeometryCollectionV2*>( geom2 ) );
  const QgsGeometryCollectionV2* c1 = static_cast<const QgsGeometryCollectionV2*>( geom1 );
  const QgsGeometryCollectionV2* c2 = static_cast<const QgsGeometryCollectionV2*>( geom2 );

  QVERIFY( c1->numGeometries() == c2->numGeometries() );

  for ( int i = 0, n = c1->numGeometries(); i < n; ++i )
  {
    compareChildGeometries( c1->geometryN( i ), c2->geometryN( i ) );
  }
}

///////////////////////////////////////////////////////////////////////////////

template<class T, compateGeometries_t compareGeometries>
void testWKT()
{
  QFETCH( QString, wkt );
  QFETCH( void*, pgeom );

  QgsAbstractGeometryV2* geom = reinterpret_cast<QgsAbstractGeometryV2*>( pgeom );
  QgsAbstractGeometryV2* testGeom = new T();

  QVERIFY( testGeom->fromWkt( wkt ) );
  QCOMPARE( geom->wkbType(), testGeom->wkbType() );
  compareGeometries( geom, testGeom );
  QString wktTest = testGeom->asWkt( 6 );
//  QTextStream(stdout) << wktTest << endl << wkt << endl << endl;
  QVERIFY( wktTest == wkt );
}

template<class T, compateGeometries_t compareGeometries>
void testWKB()
{
  QFETCH( QByteArray, wkb );
  QFETCH( void*, pgeom );

  QgsAbstractGeometryV2* geom = reinterpret_cast<QgsAbstractGeometryV2*>( pgeom );
  QgsAbstractGeometryV2* testGeom = new T();

  QVERIFY( testGeom->fromWkb( reinterpret_cast<const unsigned char*>( wkb.constData() ) ) );
  QCOMPARE( geom->wkbType(), testGeom->wkbType() );
  compareGeometries( geom, testGeom );
  int wkbLen = 0;
  char* wkbTest = reinterpret_cast<char*>( testGeom->asWkb( wkbLen ) );
  QVERIFY( wkbLen == wkb.length() );
  QVERIFY( QByteArray( wkbTest, wkbLen ) == wkb );
}

///////////////////////////////////////////////////////////////////////////////

class TestQgsGeometryV2ImportExport: public QObject
{
    Q_OBJECT

  private slots:
    void testCircularString_data();
    void testCircularStringWkb_data() { testCircularString_data(); }
    void testCircularStringWkt_data() { testCircularString_data(); }
    void testCircularStringWkb() { testWKB<QgsCircularStringV2, compareQgsCurveV2>(); }
    void testCircularStringWkt() { testWKT<QgsCircularStringV2, compareQgsCurveV2>(); }

    void testLineString_data();
    void testLineStringWkb_data() { testLineString_data(); }
    void testLineStringWkt_data() { testLineString_data(); }
    void testLineStringWkb() { testWKB<QgsLineStringV2, compareQgsCurveV2>(); }
    void testLineStringWkt() { testWKT<QgsLineStringV2, compareQgsCurveV2>(); }

    void testCompoundCurve_data();
    void testCompoundCurveWkb_data() { testCompoundCurve_data(); }
    void testCompoundCurveWkt_data() { testCompoundCurve_data(); }
    void testCompoundCurveWkb() { testWKB<QgsCompoundCurveV2, compareQgsCompoundCurveV2>(); }
    void testCompoundCurveWkt() { testWKT<QgsCompoundCurveV2, compareQgsCompoundCurveV2>(); }

    void testPoint_data();
    void testPointWkb_data() { testPoint_data(); }
    void testPointWkt_data() { testPoint_data(); }
    void testPointWkb() { testWKB<QgsPointV2, compareQgsPointV2>(); }
    void testPointWkt() { testWKT<QgsPointV2, compareQgsPointV2>(); }

    void testMultiCurve_data();
    void testMultiCurveWkb_data() { testMultiCurve_data(); }
    void testMultiCurveWkt_data() { testMultiCurve_data(); }
    void testMultiCurveWkb() { testWKB<QgsMultiCurveV2, compareQgsGeometryCollectionV2 <compareQgsCurveV2> >(); }
    void testMultiCurveWkt() { testWKT<QgsMultiCurveV2, compareQgsGeometryCollectionV2 <compareQgsCurveV2> >(); }

    void testMultiLineString_data();
    void testMultiLineStringWkb_data() { testMultiLineString_data(); }
    void testMultiLineStringWkt_data() { testMultiLineString_data(); }
    void testMultiLineStringWkb() { testWKB<QgsMultiLineStringV2, compareQgsGeometryCollectionV2 <compareQgsCurveV2> >(); }
    void testMultiLineStringWkt() { testWKT<QgsMultiLineStringV2, compareQgsGeometryCollectionV2 <compareQgsCurveV2> >(); }

    void testMultiPoint_data();
    void testMultiPointWkb_data() { testMultiPoint_data(); }
    void testMultiPointWkt_data() { testMultiPoint_data(); }
    void testMultiPointWkb() { testWKB<QgsMultiPointV2, compareQgsGeometryCollectionV2 <compareQgsPointV2> >(); }
    void testMultiPointWkt() { testWKT<QgsMultiPointV2, compareQgsGeometryCollectionV2 <compareQgsPointV2> >(); }

    void testMultiPolygon_data();
    void testMultiPolygonWkb_data() { testMultiPolygon_data(); }
    void testMultiPolygonWkt_data() { testMultiPolygon_data(); }
    void testMultiPolygonWkb() { testWKB<QgsMultiPolygonV2, compareQgsGeometryCollectionV2 <compareQgsCurvePolygonV2> >(); }
    void testMultiPolygonWkt() { testWKT<QgsMultiPolygonV2, compareQgsGeometryCollectionV2 <compareQgsCurvePolygonV2> >(); }

    void testMultiSurface_data();
    void testMultiSurfaceWkb_data() { testMultiSurface_data(); }
    void testMultiSurfaceWkt_data() { testMultiSurface_data(); }
    void testMultiSurfaceWkb() { testWKB<QgsMultiSurfaceV2, compareQgsGeometryCollectionV2 <compareQgsCurvePolygonV2> >(); }
    void testMultiSurfaceWkt() { testWKT<QgsMultiSurfaceV2, compareQgsGeometryCollectionV2 <compareQgsCurvePolygonV2> >(); }

    void testCurvePolygon_data();
    void testCurvePolygonWkb_data() { testCurvePolygon_data(); }
    void testCurvePolygonWkt_data() { testCurvePolygon_data(); }
    void testCurvePolygonWkb() { testWKB<QgsCurvePolygonV2, compareQgsCurvePolygonV2>(); }
    void testCurvePolygonWkt() { testWKT<QgsCurvePolygonV2, compareQgsCurvePolygonV2>(); }

    void testPolygon_data();
    void testPolygonWkb_data() { testPolygon_data(); }
    void testPolygonWkt_data() { testPolygon_data(); }
    void testPolygonWkb() { testWKB<QgsPolygonV2, compareQgsCurvePolygonV2>(); }
    void testPolygonWkt() { testWKT<QgsPolygonV2, compareQgsCurvePolygonV2>(); }

  private:
    static void testGml2Export( const QgsAbstractGeometryV2 *geom, const QString& gml2 );
    static void testGml3Export( const QgsAbstractGeometryV2 *geom, const QString& gml3 );
    static void testJsonExport( const QgsAbstractGeometryV2 *geom, const QString& json );
};

///////////////////////////////////////////////////////////////////////////////

void TestQgsGeometryV2ImportExport::testGml2Export( const QgsAbstractGeometryV2* geom, const QString& gml2 )
{
  QDomDocument doc;
  doc.appendChild( geom->asGML2( doc, 6 ) );
  QVERIFY( doc.toString( 0 ).replace( "\n", "" ) == gml2 );
}

void TestQgsGeometryV2ImportExport::testGml3Export( const QgsAbstractGeometryV2* geom, const QString& gml3 )
{
  QDomDocument doc;
  doc.appendChild( geom->asGML3( doc, 6 ) );
  QVERIFY( doc.toString( 0 ).replace( "\n", "" ) == gml3 );
}

void TestQgsGeometryV2ImportExport::testJsonExport( const QgsAbstractGeometryV2* geom, const QString& json )
{
  QString jsonTest = geom->asJSON( 6 );
  QVERIFY( jsonTest == json );
}

///////////////////////////////////////////////////////////////////////////////
/// Generate WKB:
/// SELECT select ST_AsBinary(ST_GeomFromText(...))
/// Regex: (\w\w) -> 0x\1,

void TestQgsGeometryV2ImportExport::testCircularString_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbCircularString[] = {0x01, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F};
  QgsCircularStringV2* circularString = new QgsCircularStringV2();
  circularString->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) );
  QTest::newRow( "CircularString" ) << "CircularString (0.1 0.2, 1.3 0.4, 1.5 1.6)"
  << QByteArray( reinterpret_cast<char*>( wkbCircularString ), sizeof( wkbCircularString ) )
  << reinterpret_cast<void*>( circularString );

  unsigned char wkbCircularStringZ[] = {0x01, 0xF0, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xF6, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0xBF, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xFB, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x07, 0x40};
  QgsCircularStringV2* circularStringZ = new QgsCircularStringV2();
  circularStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 0.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.4, 0.5, -1.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.7, 1.8, 2.9 ) );
  QTest::newRow( "CircularStringZ" ) << "CircularStringZ (0.1 0.2 0.3, 1.4 0.5 -1.6, 1.7 1.8 2.9)"
  << QByteArray( reinterpret_cast<char*>( wkbCircularStringZ ), sizeof( wkbCircularStringZ ) )
  << reinterpret_cast<void*>( circularStringZ );

  unsigned char wkbCircularStringM[] = {0x01, 0xD8, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xF6, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0xBF, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xFB, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x07, 0x40};
  QgsCircularStringV2* circularStringM = new QgsCircularStringV2();
  circularStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 0.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.4, 0.5, 0.0, -1.6 ) << QgsPointV2( QgsWKBTypes::PointM, 1.7, 1.8, 0.0, 2.9 ) );
  QTest::newRow( "CircularStringM" ) << "CircularStringM (0.1 0.2 0.3, 1.4 0.5 -1.6, 1.7 1.8 2.9)"
  << QByteArray( reinterpret_cast<char*>( wkbCircularStringM ), sizeof( wkbCircularStringM ) )
  << reinterpret_cast<void*>( circularStringM );

  unsigned char wkbCircularStringZM[] = {0x01, 0xC0, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xE3, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xFB, 0xBF, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0E, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xFE, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF1, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsCircularStringV2* circularStringZM = new QgsCircularStringV2();
  circularStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 0.3, 2.4 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 0.6, -1.7, 3.8 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.9, 1.1, 2.2, 4.3 ) );
  QTest::newRow( "CircularStringZM" ) << "CircularStringZM (0.1 0.2 0.3 2.4, 1.5 0.6 -1.7 3.8, 1.9 1.1 2.2 4.3)"
  << QByteArray( reinterpret_cast<char*>( wkbCircularStringZM ), sizeof( wkbCircularStringZM ) )
  << reinterpret_cast<void*>( circularStringZM );
}

void TestQgsGeometryV2ImportExport::testLineString_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );;

  unsigned char wkbLineString[] = {0x01, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F};
  QgsLineStringV2* lineString = new QgsLineStringV2();
  lineString->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) );
  QTest::newRow( "LineString" ) << "LineString (0.1 0.2, 1.3 0.4, 1.5 1.6)"
  << QByteArray( reinterpret_cast<char*>( wkbLineString ), sizeof( wkbLineString ) )
  << reinterpret_cast<void*>( lineString );

  unsigned char wkbLineStringZ[] = {0x01, 0xEA, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xF6, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0xBF, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xFB, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x07, 0x40};
  QgsLineStringV2* lineStringZ = new QgsLineStringV2();
  lineStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 0.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.4, 0.5, -1.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.7, 1.8, 2.9, false ) );
  QTest::newRow( "LineStringZ" ) << "LineStringZ (0.1 0.2 0.3, 1.4 0.5 -1.6, 1.7 1.8 2.9)"
  << QByteArray( reinterpret_cast<char*>( wkbLineStringZ ), sizeof( wkbLineStringZ ) )
  << reinterpret_cast<void*>( lineStringZ );

  unsigned char wkbLineStringM[] = {0x01, 0xD2, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xF6, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0xBF, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xFB, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x07, 0x40};
  QgsLineStringV2* lineStringM = new QgsLineStringV2();
  lineStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 0.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.4, 0.5, 0.0, -1.6 ) << QgsPointV2( QgsWKBTypes::PointM, 1.7, 1.8, 0.0, 2.9 ) );
  QTest::newRow( "LineStringM" ) << "LineStringM (0.1 0.2 0.3, 1.4 0.5 -1.6, 1.7 1.8 2.9)"
  << QByteArray( reinterpret_cast<char*>( wkbLineStringM ), sizeof( wkbLineStringM ) )
  << reinterpret_cast<void*>( lineStringM );

  unsigned char wkbLineStringZM[] = {0x01, 0xBA, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xE3, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xFB, 0xBF, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0E, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xFE, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF1, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsLineStringV2* lineStringZM = new QgsLineStringV2();
  lineStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 0.3, 2.4 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 0.6, -1.7, 3.8 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.9, 1.1, 2.2, 4.3 ) );
  QTest::newRow( "LineStringZM" ) << "LineStringZM (0.1 0.2 0.3 2.4, 1.5 0.6 -1.7 3.8, 1.9 1.1 2.2 4.3)"
  << QByteArray( reinterpret_cast<char*>( wkbLineStringZM ), sizeof( wkbLineStringZM ) )
  << reinterpret_cast<void*>( lineStringZM );
}

///////////////////////////////////////////////////////////////////////////////

void TestQgsGeometryV2ImportExport::testCompoundCurve_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbCompoundCurve[] = {0x01, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x01, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40};
  QgsCompoundCurveV2* compoundCurve = new QgsCompoundCurveV2();
  QgsLineStringV2* lineString = new QgsLineStringV2();
  lineString->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) );
  compoundCurve->addCurve( lineString );
  QgsCircularStringV2* circularString = new QgsCircularStringV2();
  circularString->setPoints( QList<QgsPointV2>() << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 6.7, 6.6 ) << QgsPointV2( 2.2, 9.4 ) );
  compoundCurve->addCurve( circularString );
  QTest::newRow( "CompoundCurve" ) << "CompoundCurve ((0.1 0.2, 1.3 0.4, 1.5 1.6),CircularString (1.5 1.6, 6.7 6.6, 2.2 9.4))"
  << QByteArray( reinterpret_cast<char*>( wkbCompoundCurve ), sizeof( wkbCompoundCurve ) )
  << reinterpret_cast<void*>( compoundCurve );

  unsigned char wkbCompoundCurveZ[] = {0x01, 0xF1, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xEA, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xF0, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsCompoundCurveV2* compoundCurveZ = new QgsCompoundCurveV2();
  QgsLineStringV2* lineStringZ = new QgsLineStringV2();
  lineStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.2 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) );
  compoundCurveZ->addCurve( lineStringZ );
  QgsCircularStringV2* circularStringZ = new QgsCircularStringV2();
  circularStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 6.7, 6.6, 3.1 ) << QgsPointV2( QgsWKBTypes::PointZ, 2.2, 9.4, 4.3, false ) );
  compoundCurveZ->addCurve( circularStringZ );
  QTest::newRow( "CompoundCurveZ" ) << "CompoundCurveZ ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6),CircularStringZ (1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3))"
  << QByteArray( reinterpret_cast<char*>( wkbCompoundCurveZ ), sizeof( wkbCompoundCurveZ ) )
  << reinterpret_cast<void*>( compoundCurveZ );

  unsigned char wkbCompoundCurveM[] = {0x01, 0xD9, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD2, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xD8, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsCompoundCurveV2* compoundCurveM = new QgsCompoundCurveV2();
  QgsLineStringV2* lineStringM = new QgsLineStringV2();
  lineStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.2 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) );
  compoundCurveM->addCurve( lineStringM );
  QgsCircularStringV2* circularStringM = new QgsCircularStringV2();
  circularStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 6.7, 6.6, 0.0, 3.1 ) << QgsPointV2( QgsWKBTypes::PointM, 2.2, 9.4, 0.0, 4.3 ) );
  compoundCurveM->addCurve( circularStringM );
  QTest::newRow( "CompoundCurveM" ) << "CompoundCurveM ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6),CircularStringM (1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3))"
  << QByteArray( reinterpret_cast<char*>( wkbCompoundCurveM ), sizeof( wkbCompoundCurveM ) )
  << reinterpret_cast<void*>( compoundCurveM );

  unsigned char wkbCompoundCurveZM[] = {0x01, 0xC1, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xBA, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x01, 0xC0, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40};
  QgsCompoundCurveV2* compoundCurveZM = new QgsCompoundCurveV2();
  QgsLineStringV2* lineStringZM = new QgsLineStringV2();
  lineStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.2, 1.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) );
  compoundCurveZM->addCurve( lineStringZM );
  QgsCircularStringV2* circularStringZM = new QgsCircularStringV2();
  circularStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 6.7, 6.6, 3.1, 2.6 ) << QgsPointV2( QgsWKBTypes::PointZM, 2.2, 9.4, 4.3, 8.5 ) );
  compoundCurveZM->addCurve( circularStringZM );
  QTest::newRow( "CompoundCurveZM" ) << "CompoundCurveZM ((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3),CircularStringZM (1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5))"
  << QByteArray( reinterpret_cast<char*>( wkbCompoundCurveZM ), sizeof( wkbCompoundCurveZM ) )
  << reinterpret_cast<void*>( compoundCurveZM );
}

void TestQgsGeometryV2ImportExport::testPoint_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbPoint[] = {0x01, 0x01, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F};
  QTest::newRow( "Point" ) << "Point (0.1 0.2)"
  << QByteArray( reinterpret_cast<char*>( wkbPoint ), sizeof( wkbPoint ) )
  << reinterpret_cast<void*>( new QgsPointV2( 0.1, 0.2 ) );

  unsigned char wkbPointZ[] = {0x01, 0xE9, 0x03, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F};
  QTest::newRow( "PointZ" ) << "PointZ (0.1 0.2 0.3)"
  << QByteArray( reinterpret_cast<char*>( wkbPointZ ), sizeof( wkbPointZ ) )
  << reinterpret_cast<void*>( new QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 0.3 ) );

  unsigned char wkbPointM[] = {0x01, 0xD1, 0x07, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F};
  QTest::newRow( "PointM" ) << "PointM (0.1 0.2 0.3)"
  << QByteArray( reinterpret_cast<char*>( wkbPointM ), sizeof( wkbPointM ) )
  << reinterpret_cast<void*>( new QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 0.3 ) );

  unsigned char wkbPointZM[] = {0x01, 0xB9, 0x0B, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xD3, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x03, 0x40};
  QTest::newRow( "PointZM" ) << "PointZM (0.1 0.2 0.3 2.4)"
  << QByteArray( reinterpret_cast<char*>( wkbPointZM ), sizeof( wkbPointZM ) )
  << reinterpret_cast<void*>( new QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 0.3, 2.4 ) );
}

void TestQgsGeometryV2ImportExport::testMultiCurve_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbMultiCurve[] = {0x01, 0x0B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x01, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40};
  QgsMultiCurveV2* multiCurve = new QgsMultiCurveV2();
  QgsLineStringV2* lineString = new QgsLineStringV2();
  lineString->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) );
  multiCurve->addGeometry( lineString );
  QgsCircularStringV2* circularString = new QgsCircularStringV2();
  circularString->setPoints( QList<QgsPointV2>() << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 6.7, 6.6 ) << QgsPointV2( 2.2, 9.4 ) );
  multiCurve->addGeometry( circularString );
  QTest::newRow( "MultiCurve" ) << "MultiCurve ((0.1 0.2, 1.3 0.4, 1.5 1.6),CircularString (1.5 1.6, 6.7 6.6, 2.2 9.4))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiCurve ), sizeof( wkbMultiCurve ) )
  << reinterpret_cast<void*>( multiCurve );

  unsigned char wkbMultiCurveZ[] = {0x01, 0xF3, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xEA, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xF0, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsMultiCurveV2* multiCurveZ = new QgsMultiCurveV2();
  QgsLineStringV2* lineStringZ = new QgsLineStringV2();
  lineStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.2 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) );
  multiCurveZ->addGeometry( lineStringZ );
  QgsCircularStringV2* circularStringZ = new QgsCircularStringV2();
  circularStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 6.7, 6.6, 3.1 ) << QgsPointV2( QgsWKBTypes::PointZ, 2.2, 9.4, 4.3 ) );
  multiCurveZ->addGeometry( circularStringZ );
  QTest::newRow( "MultiCurveZ" ) << "MultiCurveZ ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6),CircularStringZ (1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiCurveZ ), sizeof( wkbMultiCurveZ ) )
  << reinterpret_cast<void*>( multiCurveZ );

  unsigned char wkbMultiCurveM[] = {0x01, 0xDB, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD2, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xD8, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsMultiCurveV2* multiCurveM = new QgsMultiCurveV2();
  QgsLineStringV2* lineStringM = new QgsLineStringV2();
  lineStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.2 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) );
  multiCurveM->addGeometry( lineStringM );
  QgsCircularStringV2* circularStringM = new QgsCircularStringV2();
  circularStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 6.7, 6.6, 0.0, 3.1 ) << QgsPointV2( QgsWKBTypes::PointM, 2.2, 9.4, 0.0, 4.3 ) );
  multiCurveM->addGeometry( circularStringM );
  QTest::newRow( "MultiCurveM" ) << "MultiCurveM ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6),CircularStringM (1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiCurveM ), sizeof( wkbMultiCurveM ) )
  << reinterpret_cast<void*>( multiCurveM );

  unsigned char wkbMultiCurveZM[] = {0x01, 0xC3, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xBA, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x01, 0xC0, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40};
  QgsMultiCurveV2* multiCurveZM = new QgsMultiCurveV2();
  QgsLineStringV2* lineStringZM = new QgsLineStringV2();
  lineStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.2, 1.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) );
  multiCurveZM->addGeometry( lineStringZM );
  QgsCircularStringV2* circularStringZM = new QgsCircularStringV2();
  circularStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 6.7, 6.6, 3.1, 2.6 ) << QgsPointV2( QgsWKBTypes::PointZM, 2.2, 9.4, 4.3, 8.5 ) );
  multiCurveZM->addGeometry( circularStringZM );
  QTest::newRow( "MultiCurveZM" ) << "MultiCurveZM ((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3),CircularStringZM (1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiCurveZM ), sizeof( wkbMultiCurveZM ) )
  << reinterpret_cast<void*>( multiCurveZM );
}

void TestQgsGeometryV2ImportExport::testMultiLineString_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbMultiLineString[] = {0x01, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40};
  QgsMultiLineStringV2* multiLineString = new QgsMultiLineStringV2();
  QgsLineStringV2* lineString1 = new QgsLineStringV2();
  lineString1->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) );
  multiLineString->addGeometry( lineString1 );
  QgsLineStringV2* lineString2 = new QgsLineStringV2();
  lineString2->setPoints( QList<QgsPointV2>() << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 6.7, 6.6 ) << QgsPointV2( 2.2, 9.4 ) );
  multiLineString->addGeometry( lineString2 );
  QTest::newRow( "MultiLineString" ) << "MultiLineString ((0.1 0.2, 1.3 0.4, 1.5 1.6),(1.5 1.6, 6.7 6.6, 2.2 9.4))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiLineString ), sizeof( wkbMultiLineString ) )
  << reinterpret_cast<void*>( multiLineString );

  unsigned char wkbMultiLineStringZ[] = {0x01, 0xED, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xEA, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xEA, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsMultiLineStringV2* multiLineStringZ = new QgsMultiLineStringV2();
  QgsLineStringV2* lineString1Z = new QgsLineStringV2();
  lineString1Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.2 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) );
  multiLineStringZ->addGeometry( lineString1Z );
  QgsLineStringV2* lineString2Z = new QgsLineStringV2();
  lineString2Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 6.7, 6.6, 3.1 ) << QgsPointV2( QgsWKBTypes::PointZ, 2.2, 9.4, 4.3 ) );
  multiLineStringZ->addGeometry( lineString2Z );
  QTest::newRow( "MultiLineStringZ" ) << "MultiLineStringZ ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiLineStringZ ), sizeof( wkbMultiLineStringZ ) )
  << reinterpret_cast<void*>( multiLineStringZ );

  unsigned char wkbMultiLineStringM[] = {0x01, 0xD5, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD2, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xD2, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40};
  QgsMultiLineStringV2* multiLineStringM = new QgsMultiLineStringV2();
  QgsLineStringV2* lineString1M = new QgsLineStringV2();
  lineString1M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.2 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) );
  multiLineStringM->addGeometry( lineString1M );
  QgsLineStringV2* lineString2M = new QgsLineStringV2();
  lineString2M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 6.7, 6.6, 0.0, 3.1 ) << QgsPointV2( QgsWKBTypes::PointM, 2.2, 9.4, 0.0, 4.3 ) );
  multiLineStringM->addGeometry( lineString2M );
  QTest::newRow( "MultiLineStringM" ) << "MultiLineStringM ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiLineStringM ), sizeof( wkbMultiLineStringM ) )
  << reinterpret_cast<void*>( multiLineStringM );

  unsigned char wkbMultiLineStringZM[] = {0x01, 0xBD, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xBA, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x01, 0xBA, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40};
  QgsMultiLineStringV2* multiLineStringZM = new QgsMultiLineStringV2();
  QgsLineStringV2* lineString1ZM = new QgsLineStringV2();
  lineString1ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.2, 1.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) );
  multiLineStringZM->addGeometry( lineString1ZM );
  QgsLineStringV2* lineString2ZM = new QgsLineStringV2();
  lineString2ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 6.7, 6.6, 3.1, 2.6 ) << QgsPointV2( QgsWKBTypes::PointZM, 2.2, 9.4, 4.3, 8.5 ) );
  multiLineStringZM->addGeometry( lineString2ZM );
  QTest::newRow( "MultiLineStringZM" ) << "MultiLineStringZM ((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3),(1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiLineStringZM ), sizeof( wkbMultiLineStringZM ) )
  << reinterpret_cast<void*>( multiLineStringZM );
}

void TestQgsGeometryV2ImportExport::testMultiPoint_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbMultiPoint[] = {0x01, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x01, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F};
  QgsMultiPointV2* multiPoint = new QgsMultiPointV2();
  multiPoint->addGeometry( new QgsPointV2( 0.1, 0.2 ) );
  multiPoint->addGeometry( new QgsPointV2( 1.3, 0.4 ) );
  QTest::newRow( "MultiPoint" ) << "MultiPoint ((0.1 0.2),(1.3 0.4))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPoint ), sizeof( wkbMultiPoint ) )
  << reinterpret_cast<void*>( multiPoint );

  unsigned char wkbMultiPointZ[] = {0x01, 0xEC, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xE9, 0x03, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x01, 0xE9, 0x03, 0x00, 0x00, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x19, 0x40};
  QgsMultiPointV2* multiPointZ = new QgsMultiPointV2();
  multiPointZ->addGeometry( new QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) );
  multiPointZ->addGeometry( new QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.4 ) );
  QTest::newRow( "MultiPointZ" ) << "MultiPointZ ((0.1 0.2 6.3),(1.3 0.4 6.4))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPointZ ), sizeof( wkbMultiPointZ ) )
  << reinterpret_cast<void*>( multiPointZ );

  unsigned char wkbMultiPointM[] = {0x01, 0xD4, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD1, 0x07, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x01, 0xD1, 0x07, 0x00, 0x00, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x19, 0x40};
  QgsMultiPointV2* multiPointM = new QgsMultiPointV2();
  multiPointM->addGeometry( new QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) );
  multiPointM->addGeometry( new QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.4 ) );
  QTest::newRow( "MultiPointM" ) << "MultiPointM ((0.1 0.2 6.3),(1.3 0.4 6.4))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPointM ), sizeof( wkbMultiPointM ) )
  << reinterpret_cast<void*>( multiPointM );

  unsigned char wkbMultiPointZM[] = {0x01, 0xBC, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xB9, 0x0B, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x01, 0xB9, 0x0B, 0x00, 0x00, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F};
  QgsMultiPointV2* multiPointZM = new QgsMultiPointV2();
  multiPointZM->addGeometry( new QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) );
  multiPointZM->addGeometry( new QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.4, 1.5 ) );
  QTest::newRow( "MultiPointZM" ) << "MultiPointZM ((0.1 0.2 6.3 2.3),(1.3 0.4 6.4 1.5))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPointZM ), sizeof( wkbMultiPointZM ) )
  << reinterpret_cast<void*>( multiPointZM );
}

void TestQgsGeometryV2ImportExport::testMultiPolygon_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbMultiPolygon[] = {0x01, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F};
  QgsMultiPolygonV2* multiPolygon = new QgsMultiPolygonV2();
  QgsPolygonV2* polygon1 = new QgsPolygonV2();
  QgsPolygonV2* polygon2 = new QgsPolygonV2();
  QgsLineStringV2* lineString1 = new QgsLineStringV2();
  lineString1->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 0.1, 0.2 ) );
  polygon1->setExteriorRing( lineString1 );
  polygon2->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1->clone() ) );
  QgsLineStringV2* lineString2 = new QgsLineStringV2();
  lineString2->setPoints( QList<QgsPointV2>() << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 6.7, 6.6 ) << QgsPointV2( 2.2, 9.4 ) << QgsPointV2( 5.3, 6.3 ) << QgsPointV2( 1.5, 1.6 ) );
  polygon1->addInteriorRing( lineString2 );
  polygon2->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2->clone() ) );
  multiPolygon->addGeometry( polygon1 );
  multiPolygon->addGeometry( polygon2 );
  QTest::newRow( "MultiPolygon" ) << "MultiPolygon (((0.1 0.2, 1.3 0.4, 1.5 1.6, 0.1 0.2),(1.5 1.6, 6.7 6.6, 2.2 9.4, 5.3 6.3, 1.5 1.6)),((0.1 0.2, 1.3 0.4, 1.5 1.6, 0.1 0.2),(1.5 1.6, 6.7 6.6, 2.2 9.4, 5.3 6.3, 1.5 1.6)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPolygon ), sizeof( wkbMultiPolygon ) )
  << reinterpret_cast<void*>( multiPolygon );

  unsigned char wkbMultiPolygonZ[] = {0x01, 0xEE, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xEB, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xEB, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsMultiPolygonV2* multiPolygonZ = new QgsMultiPolygonV2();
  QgsPolygonV2* polygon1Z = new QgsPolygonV2();
  QgsPolygonV2* polygon2Z = new QgsPolygonV2();
  QgsLineStringV2* lineString1Z = new QgsLineStringV2();
  lineString1Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.2 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3, false ) );
  polygon1Z->setExteriorRing( lineString1Z );
  polygon2Z->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1Z->clone() ) );
  QgsLineStringV2* lineString2Z = new QgsLineStringV2();
  lineString2Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 6.7, 6.6, 3.1 ) << QgsPointV2( QgsWKBTypes::PointZ, 2.2, 9.4, 4.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 5.3, 6.3, 9.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) );
  polygon1Z->addInteriorRing( lineString2Z );
  polygon2Z->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2Z->clone() ) );
  multiPolygonZ->addGeometry( polygon1Z );
  multiPolygonZ->addGeometry( polygon2Z );
  QTest::newRow( "MultiPolygonZ" ) << "MultiPolygonZ (((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)),((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPolygonZ ), sizeof( wkbMultiPolygonZ ) )
  << reinterpret_cast<void*>( multiPolygonZ );

  unsigned char wkbMultiPolygonM[] = {0x01, 0xD6, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD3, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xD3, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsMultiPolygonV2* multiPolygonM = new QgsMultiPolygonV2();
  QgsPolygonV2* polygon1M = new QgsPolygonV2();
  QgsPolygonV2* polygon2M = new QgsPolygonV2();
  QgsLineStringV2* lineString1M = new QgsLineStringV2();
  lineString1M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.2 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) );
  polygon1M->setExteriorRing( lineString1M );
  polygon2M->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1M->clone() ) );
  QgsLineStringV2* lineString2M = new QgsLineStringV2();
  lineString2M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 6.7, 6.6, 0.0, 3.1 ) << QgsPointV2( QgsWKBTypes::PointM, 2.2, 9.4, 0.0, 4.3 ) << QgsPointV2( QgsWKBTypes::PointM, 5.3, 6.3, 0.0, 9.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) );
  polygon1M->addInteriorRing( lineString2M );
  polygon2M->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2M->clone() ) );
  multiPolygonM->addGeometry( polygon1M );
  multiPolygonM->addGeometry( polygon2M );
  QTest::newRow( "MultiPolygonM" ) << "MultiPolygonM (((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)),((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPolygonM ), sizeof( wkbMultiPolygonM ) )
  << reinterpret_cast<void*>( multiPolygonM );

  unsigned char wkbMultiPolygonZM[] = {0x01, 0xBE, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xBB, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x01, 0xBB, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40};
  QgsMultiPolygonV2* multiPolygonZM = new QgsMultiPolygonV2();
  QgsPolygonV2* polygon1ZM = new QgsPolygonV2();
  QgsPolygonV2* polygon2ZM = new QgsPolygonV2();
  QgsLineStringV2* lineString1ZM = new QgsLineStringV2();
  lineString1ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.2, 1.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) );
  polygon1ZM->setExteriorRing( lineString1ZM );
  polygon2ZM->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1ZM->clone() ) );
  QgsLineStringV2* lineString2ZM = new QgsLineStringV2();
  lineString2ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 6.7, 6.6, 3.1, 2.6 ) << QgsPointV2( QgsWKBTypes::PointZM, 2.2, 9.4, 4.3, 8.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 5.3, 6.3, 9.3, 2.1 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) );
  polygon1ZM->addInteriorRing( lineString2ZM );
  polygon2ZM->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2ZM->clone() ) );
  multiPolygonZM->addGeometry( polygon1ZM );
  multiPolygonZM->addGeometry( polygon2ZM );
  QTest::newRow( "MultiPolygonZM" ) << "MultiPolygonZM (((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3, 0.1 0.2 6.3 2.3),(1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5, 5.3 6.3 9.3 2.1, 1.5 1.6 3.6 7.3)),((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3, 0.1 0.2 6.3 2.3),(1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5, 5.3 6.3 9.3 2.1, 1.5 1.6 3.6 7.3)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiPolygonZM ), sizeof( wkbMultiPolygonZM ) )
  << reinterpret_cast<void*>( multiPolygonZM );
}

void TestQgsGeometryV2ImportExport::testMultiSurface_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbMultiSurface[] = {0x01, 0x0C, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F};
  QgsMultiSurfaceV2* multiSurface = new QgsMultiSurfaceV2();
  QgsPolygonV2* polygon = new QgsPolygonV2();
  QgsCurvePolygonV2* curvePolygon = new QgsCurvePolygonV2();
  QgsLineStringV2* lineString1 = new QgsLineStringV2();
  lineString1->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 0.1, 0.2 ) );
  polygon->setExteriorRing( lineString1 );
  curvePolygon->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1->clone() ) );
  QgsLineStringV2* lineString2 = new QgsLineStringV2();
  lineString2->setPoints( QList<QgsPointV2>() << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 6.7, 6.6 ) << QgsPointV2( 2.2, 9.4 ) << QgsPointV2( 5.3, 6.3 ) << QgsPointV2( 1.5, 1.6 ) );
  polygon->addInteriorRing( lineString2 );
  curvePolygon->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2->clone() ) );
  multiSurface->addGeometry( polygon );
  multiSurface->addGeometry( curvePolygon );
  QTest::newRow( "MultiSurface" ) << "MultiSurface (((0.1 0.2, 1.3 0.4, 1.5 1.6, 0.1 0.2),(1.5 1.6, 6.7 6.6, 2.2 9.4, 5.3 6.3, 1.5 1.6)),CurvePolygon ((0.1 0.2, 1.3 0.4, 1.5 1.6, 0.1 0.2),(1.5 1.6, 6.7 6.6, 2.2 9.4, 5.3 6.3, 1.5 1.6)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiSurface ), sizeof( wkbMultiSurface ) )
  << reinterpret_cast<void*>( multiSurface );

  unsigned char wkbMultiSurfaceZ[] = {0x01, 0xF4, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xEB, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xF2, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xEA, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x01, 0xEA, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsMultiSurfaceV2* multiSurfaceZ = new QgsMultiSurfaceV2();
  QgsPolygonV2* polygonZ = new QgsPolygonV2();
  QgsCurvePolygonV2* curvePolygonZ = new QgsCurvePolygonV2();
  QgsLineStringV2* lineString1Z = new QgsLineStringV2();
  lineString1Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.2 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) );
  polygonZ->setExteriorRing( lineString1Z );
  curvePolygonZ->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1Z->clone() ) );
  QgsLineStringV2* lineString2Z = new QgsLineStringV2();
  lineString2Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 6.7, 6.6, 3.1 ) << QgsPointV2( QgsWKBTypes::PointZ, 2.2, 9.4, 4.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 5.3, 6.3, 9.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) );
  polygonZ->addInteriorRing( lineString2Z );
  curvePolygonZ->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2Z->clone() ) );
  multiSurfaceZ->addGeometry( polygonZ );
  multiSurfaceZ->addGeometry( curvePolygonZ );
  QTest::newRow( "MultiSurfaceZ" ) << "MultiSurfaceZ (((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)),CurvePolygonZ ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiSurfaceZ ), sizeof( wkbMultiSurfaceZ ) )
  << reinterpret_cast<void*>( multiSurfaceZ );

  unsigned char wkbMultiSurfaceM[] = {0x01, 0xDC, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD3, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x01, 0xDA, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD2, 0x07, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x01, 0xD2, 0x07, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsMultiSurfaceV2* multiSurfaceM = new QgsMultiSurfaceV2();
  QgsPolygonV2* polygonM = new QgsPolygonV2();
  QgsCurvePolygonV2* curvePolygonM = new QgsCurvePolygonV2();
  QgsLineStringV2* lineString1M = new QgsLineStringV2();
  lineString1M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.2 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) );
  polygonM->setExteriorRing( lineString1M );
  curvePolygonM->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1M->clone() ) );
  QgsLineStringV2* lineString2M = new QgsLineStringV2();
  lineString2M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 6.7, 6.6, 0.0, 3.1 ) << QgsPointV2( QgsWKBTypes::PointM, 2.2, 9.4, 0.0, 4.3 ) << QgsPointV2( QgsWKBTypes::PointM, 5.3, 6.3, 0.0, 9.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) );
  polygonM->addInteriorRing( lineString2M );
  curvePolygonM->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2M->clone() ) );
  multiSurfaceM->addGeometry( polygonM );
  multiSurfaceM->addGeometry( curvePolygonM );
  QTest::newRow( "MultiSurfaceM" ) << "MultiSurfaceM (((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)),CurvePolygonM ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiSurfaceM ), sizeof( wkbMultiSurfaceM ) )
  << reinterpret_cast<void*>( multiSurfaceM );

  unsigned char wkbMultiSurfaceZM[] = {0x01, 0xC4, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xBB, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x01, 0xC2, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xBA, 0x0B, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x01, 0xBA, 0x0B, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40};
  QgsMultiSurfaceV2* multiSurfaceZM = new QgsMultiSurfaceV2();
  QgsPolygonV2* polygonZM = new QgsPolygonV2();
  QgsCurvePolygonV2* curvePolygonZM = new QgsCurvePolygonV2();
  QgsLineStringV2* lineString1ZM = new QgsLineStringV2();
  lineString1ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.2, 1.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) );
  polygonZM->setExteriorRing( lineString1ZM );
  curvePolygonZM->setExteriorRing( dynamic_cast<QgsLineStringV2*>( lineString1ZM->clone() ) );
  QgsLineStringV2* lineString2ZM = new QgsLineStringV2();
  lineString2ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 6.7, 6.6, 3.1, 2.6 ) << QgsPointV2( QgsWKBTypes::PointZM, 2.2, 9.4, 4.3, 8.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 5.3, 6.3, 9.3, 2.1 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) );
  polygonZM->addInteriorRing( lineString2ZM );
  curvePolygonZM->addInteriorRing( dynamic_cast<QgsLineStringV2*>( lineString2ZM->clone() ) );
  multiSurfaceZM->addGeometry( polygonZM );
  multiSurfaceZM->addGeometry( curvePolygonZM );
  QTest::newRow( "MultiSurfaceZM" ) << "MultiSurfaceZM (((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3, 0.1 0.2 6.3 2.3),(1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5, 5.3 6.3 9.3 2.1, 1.5 1.6 3.6 7.3)),CurvePolygonZM ((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3, 0.1 0.2 6.3 2.3),(1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5, 5.3 6.3 9.3 2.1, 1.5 1.6 3.6 7.3)))"
  << QByteArray( reinterpret_cast<char*>( wkbMultiSurfaceZM ), sizeof( wkbMultiSurfaceZM ) )
  << reinterpret_cast<void*>( multiSurfaceZM );
}

void TestQgsGeometryV2ImportExport::testCurvePolygon_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbCurvePolygon[] = {0x01, 0x0A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x01, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F};
  QgsCurvePolygonV2* curvePolygon = new QgsCurvePolygonV2();
  QgsLineStringV2* lineString = new QgsLineStringV2();
  lineString->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 0.1, 0.2 ) );
  curvePolygon->setExteriorRing( lineString );
  QgsCircularStringV2* circularString = new QgsCircularStringV2();
  circularString->setPoints( QList<QgsPointV2>() << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 6.7, 6.6 ) << QgsPointV2( 2.2, 9.4 ) << QgsPointV2( 5.3, 6.3 ) << QgsPointV2( 1.5, 1.6 ) );
  curvePolygon->addInteriorRing( circularString );
  QTest::newRow( "CurvePolygon" ) << "CurvePolygon ((0.1 0.2, 1.3 0.4, 1.5 1.6, 0.1 0.2),CircularString (1.5 1.6, 6.7 6.6, 2.2 9.4, 5.3 6.3, 1.5 1.6))"
  << QByteArray( reinterpret_cast<char*>( wkbCurvePolygon ), sizeof( wkbCurvePolygon ) )
  << reinterpret_cast<void*>( curvePolygon );

  unsigned char wkbCurvePolygonZ[] = {0x01, 0xF2, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xEA, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x01, 0xF0, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsCurvePolygonV2* curvePolygonZ = new QgsCurvePolygonV2();
  QgsLineStringV2* lineStringZ = new QgsLineStringV2();
  lineStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.2 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) );
  curvePolygonZ->setExteriorRing( lineStringZ );
  QgsCircularStringV2* circularStringZ = new QgsCircularStringV2();
  circularStringZ->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 6.7, 6.6, 3.1 ) << QgsPointV2( QgsWKBTypes::PointZ, 2.2, 9.4, 4.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 5.3, 6.3, 9.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) );
  curvePolygonZ->addInteriorRing( circularStringZ );
  QTest::newRow( "CurvePolygonZ" ) << "CurvePolygonZ ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),CircularStringZ (1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6))"
  << QByteArray( reinterpret_cast<char*>( wkbCurvePolygonZ ), sizeof( wkbCurvePolygonZ ) )
  << reinterpret_cast<void*>( curvePolygonZ );

  unsigned char wkbCurvePolygonM[] = {0x01, 0xDA, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xD2, 0x07, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x01, 0xD8, 0x07, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsCurvePolygonV2* curvePolygonM = new QgsCurvePolygonV2();
  QgsLineStringV2* lineStringM = new QgsLineStringV2();
  lineStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.2 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) );
  curvePolygonM->setExteriorRing( lineStringM );
  QgsCircularStringV2* circularStringM = new QgsCircularStringV2();
  circularStringM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 6.7, 6.6, 0.0, 3.1 ) << QgsPointV2( QgsWKBTypes::PointM, 2.2, 9.4, 0.0, 4.3 ) << QgsPointV2( QgsWKBTypes::PointM, 5.3, 6.3, 0.0, 9.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) );
  curvePolygonM->addInteriorRing( circularStringM );
  QTest::newRow( "CurvePolygonM" ) << "CurvePolygonM ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),CircularStringM (1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6))"
  << QByteArray( reinterpret_cast<char*>( wkbCurvePolygonM ), sizeof( wkbCurvePolygonM ) )
  << reinterpret_cast<void*>( curvePolygonM );

  unsigned char wkbCurvePolygonZM[] = {0x01, 0xC2, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xBA, 0x0B, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x01, 0xC0, 0x0B, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40};
  QgsCurvePolygonV2* curvePolygonZM = new QgsCurvePolygonV2();
  QgsLineStringV2* lineStringZM = new QgsLineStringV2();
  lineStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.2, 1.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) );
  curvePolygonZM->setExteriorRing( lineStringZM );
  QgsCircularStringV2* circularStringZM = new QgsCircularStringV2();
  circularStringZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 6.7, 6.6, 3.1, 2.6 ) << QgsPointV2( QgsWKBTypes::PointZM, 2.2, 9.4, 4.3, 8.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 5.3, 6.3, 9.3, 2.1 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) );
  curvePolygonZM->addInteriorRing( circularStringZM );
  QTest::newRow( "CurvePolygonZM" ) << "CurvePolygonZM ((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3, 0.1 0.2 6.3 2.3),CircularStringZM (1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5, 5.3 6.3 9.3 2.1, 1.5 1.6 3.6 7.3))"
  << QByteArray( reinterpret_cast<char*>( wkbCurvePolygonZM ), sizeof( wkbCurvePolygonZM ) )
  << reinterpret_cast<void*>( curvePolygonZM );
}

void TestQgsGeometryV2ImportExport::testPolygon_data()
{
  QTest::addColumn<QString>( "wkt" );
  QTest::addColumn<QByteArray>( "wkb" );
  QTest::addColumn<void*>( "pgeom" );

  unsigned char wkbPolygon[] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F};
  QgsPolygonV2* polygon = new QgsPolygonV2();
  QgsLineStringV2* lineString1 = new QgsLineStringV2();
  lineString1->setPoints( QList<QgsPointV2>() << QgsPointV2( 0.1, 0.2 ) << QgsPointV2( 1.3, 0.4 ) << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 0.1, 0.2 ) );
  polygon->setExteriorRing( lineString1 );
  QgsLineStringV2* lineString2 = new QgsLineStringV2();
  lineString2->setPoints( QList<QgsPointV2>() << QgsPointV2( 1.5, 1.6 ) << QgsPointV2( 6.7, 6.6 ) << QgsPointV2( 2.2, 9.4 ) << QgsPointV2( 5.3, 6.3 ) << QgsPointV2( 1.5, 1.6 ) );
  polygon->addInteriorRing( lineString2 );
  QTest::newRow( "Polygon" ) << "Polygon ((0.1 0.2, 1.3 0.4, 1.5 1.6, 0.1 0.2),(1.5 1.6, 6.7 6.6, 2.2 9.4, 5.3 6.3, 1.5 1.6))"
  << QByteArray( reinterpret_cast<char*>( wkbPolygon ), sizeof( wkbPolygon ) )
  << reinterpret_cast<void*>( polygon );

  unsigned char wkbPolygonZ[] = {0x01, 0xEB, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsPolygonV2* polygonZ = new QgsPolygonV2();
  QgsLineStringV2* lineString1Z = new QgsLineStringV2();
  lineString1Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.3, 0.4, 6.2 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 0.1, 0.2, 6.3 ) );
  polygonZ->setExteriorRing( lineString1Z );
  QgsLineStringV2* lineString2Z = new QgsLineStringV2();
  lineString2Z->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) << QgsPointV2( QgsWKBTypes::PointZ, 6.7, 6.6, 3.1 ) << QgsPointV2( QgsWKBTypes::PointZ, 2.2, 9.4, 4.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 5.3, 6.3, 9.3 ) << QgsPointV2( QgsWKBTypes::PointZ, 1.5, 1.6, 3.6 ) );
  polygonZ->addInteriorRing( lineString2Z );
  QTest::newRow( "PolygonZ" ) << "PolygonZ ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6))"
  << QByteArray( reinterpret_cast<char*>( wkbPolygonZ ), sizeof( wkbPolygonZ ) )
  << reinterpret_cast<void*>( polygonZ );

  unsigned char wkbPolygonM[] = {0x01, 0xD3, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40};
  QgsPolygonV2* polygonM = new QgsPolygonV2();
  QgsLineStringV2* lineString1M = new QgsLineStringV2();
  lineString1M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.3, 0.4, 0.0, 6.2 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 0.1, 0.2, 0.0, 6.3 ) );
  polygonM->setExteriorRing( lineString1M );
  QgsLineStringV2* lineString2M = new QgsLineStringV2();
  lineString2M->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) << QgsPointV2( QgsWKBTypes::PointM, 6.7, 6.6, 0.0, 3.1 ) << QgsPointV2( QgsWKBTypes::PointM, 2.2, 9.4, 0.0, 4.3 ) << QgsPointV2( QgsWKBTypes::PointM, 5.3, 6.3, 0.0, 9.3 ) << QgsPointV2( QgsWKBTypes::PointM, 1.5, 1.6, 0.0, 3.6 ) );
  polygonM->addInteriorRing( lineString2M );
  QTest::newRow( "PolygonM" ) << "PolygonM ((0.1 0.2 6.3, 1.3 0.4 6.2, 1.5 1.6 3.6, 0.1 0.2 6.3),(1.5 1.6 3.6, 6.7 6.6 3.1, 2.2 9.4 4.3, 5.3 6.3 9.3, 1.5 1.6 3.6))"
  << QByteArray( reinterpret_cast<char*>( wkbPolygonM ), sizeof( wkbPolygonM ) )
  << reinterpret_cast<void*>( polygonM );

  unsigned char wkbPolygonZM[] = {0x01, 0xBB, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF4, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xD9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xB9, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x1A, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1A, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x08, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x04, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x22, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x15, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x19, 0x40, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x22, 0x40, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0xF9, 0x3F, 0xCD, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x0C, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1D, 0x40};
  QgsPolygonV2* polygonZM = new QgsPolygonV2();
  QgsLineStringV2* lineString1ZM = new QgsLineStringV2();
  lineString1ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.3, 0.4, 6.2, 1.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 0.1, 0.2, 6.3, 2.3 ) );
  polygonZM->setExteriorRing( lineString1ZM );
  QgsLineStringV2* lineString2ZM = new QgsLineStringV2();
  lineString2ZM->setPoints( QList<QgsPointV2>() << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) << QgsPointV2( QgsWKBTypes::PointZM, 6.7, 6.6, 3.1, 2.6 ) << QgsPointV2( QgsWKBTypes::PointZM, 2.2, 9.4, 4.3, 8.5 ) << QgsPointV2( QgsWKBTypes::PointZM, 5.3, 6.3, 9.3, 2.1 ) << QgsPointV2( QgsWKBTypes::PointZM, 1.5, 1.6, 3.6, 7.3 ) );
  polygonZM->addInteriorRing( lineString2ZM );
  QTest::newRow( "PolygonZM" ) << "PolygonZM ((0.1 0.2 6.3 2.3, 1.3 0.4 6.2 1.5, 1.5 1.6 3.6 7.3, 0.1 0.2 6.3 2.3),(1.5 1.6 3.6 7.3, 6.7 6.6 3.1 2.6, 2.2 9.4 4.3 8.5, 5.3 6.3 9.3 2.1, 1.5 1.6 3.6 7.3))"
  << QByteArray( reinterpret_cast<char*>( wkbPolygonZM ), sizeof( wkbPolygonZM ) )
  << reinterpret_cast<void*>( polygonZM );
}

///////////////////////////////////////////////////////////////////////////////

QTEST_MAIN( TestQgsGeometryV2ImportExport )
#include "geometry/moc_testqgsgeometryv2importexport.cxx"
